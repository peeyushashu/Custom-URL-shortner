{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","state","longurl","loading","error","data","handleGetShortURL","setState","Axios","post","url","then","res","catch","err","handleChange","e","target","value","this","Container","Form","Input","label","placeholder","onChange","Button","onClick","Divider","href","ShortURL","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","app","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uTA+CeA,E,4MAxCbC,MAAQ,CACNC,QAAQ,GACRC,SAAS,EACTC,MAAO,KACPC,KAAM,M,EAGTC,kBAAmB,WAClB,EAAKC,SAAS,CAACJ,SAAS,IACxBK,IAAMC,KAAK,iCAAkC,CAACC,IAAI,EAAKT,MAAMC,UAC1DS,MAAK,SAAAC,GACF,EAAKL,SAAS,CAACF,KAAMO,EAAIP,KAAOF,SAAQ,OAE3CU,OAAM,SAAAC,GACH,EAAKP,SAAS,CAACH,MAAOU,EAAKX,SAAQ,Q,EAIzCY,aAAe,SAAAC,GACb,EAAKT,SAAS,CAAEL,QAAUc,EAAEC,OAAOC,S,4CAGrC,WACE,MAAuCC,KAAKlB,MAArCI,EAAP,EAAOA,KAAMD,EAAb,EAAaA,MAAgBF,GAA7B,EAAoBC,QAApB,EAA6BD,SAC7B,OACE,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,MAAM,MAAMC,YAAY,iBAAiBC,SAAUN,KAAKJ,aAAcG,MAAOhB,IACzF,kBAACwB,EAAA,EAAD,CAAQC,QAASR,KAAKb,mBAAtB,WAEF,kBAACsB,EAAA,EAAD,MACCxB,EAAQ,2BAAIe,KAAKf,OAAWC,EAAO,oCAChC,6CACA,uBAAGwB,KAAMxB,GAAQA,EAAKA,KAAKyB,UAAWzB,GAAQA,EAAKA,KAAKyB,WACvD,0C,GAnCKC,aCIZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT5B,MAAK,SAAAgC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBrC,OAAM,SAAAT,GACL6C,QAAQ7C,MAAM,4CAA6CA,MC1EjE,IAAM+C,EACF,kBAAC,EAAD,MAGJC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDW9B,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,GAAN,sBAEPzB,IAiDV,SAAiCO,GAE/BqB,MAAMrB,GACH5B,MAAK,SAAAkD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvD,MAAK,SAAAgC,GACjCA,EAAawB,aAAaxD,MAAK,WAC7BuB,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnB1B,OAAM,WACLoC,QAAQC,IACN,oEArEAmB,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMvD,MAAK,WACjCsC,QAAQC,IACN,gHAMJZ,EAAgBC,OCtCxB+B,K","file":"static/js/main.af741cb0.chunk.js","sourcesContent":["import Axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Button, Container, Form, TextArea, Divider } from 'semantic-ui-react'\r\n\r\n\r\nclass App extends Component {\r\n  state = { \r\n    longurl:\"\",\r\n    loading: false,\r\n    error: null,\r\n    data: null\r\n }\r\n\r\n handleGetShortURL= () =>{\r\n  this.setState({loading: true})\r\n  Axios.post('http://127.0.0.1:8000/add-url/', {url:this.state.longurl})\r\n    .then(res=>{\r\n        this.setState({data: res.data , loading:false})\r\n    })\r\n    .catch(err=>{\r\n        this.setState({error: err, loading:false})\r\n    })\r\n}\r\n\r\n  handleChange = e => {\r\n    this.setState({ longurl : e.target.value });\r\n  };\r\n \r\n  render() {\r\n    const {data, error, loading, longurl}= this.state;\r\n    return (\r\n      <Container>\r\n        <Form>\r\n          <Form.Input label='URL' placeholder='Enter Long URL' onChange={this.handleChange} value={longurl} />\r\n          <Button onClick={this.handleGetShortURL}>Submit</Button>\r\n        </Form>\r\n        <Divider/>\r\n        {error ? <p>{this.error}</p>:data ? <>\r\n            <h2>Short URL is:</h2>\r\n            <a href={data && data.data.ShortURL}>{data && data.data.ShortURL}</a>\r\n        </>: <></>}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nconst app = (\r\n    <App />\r\n);\r\n\r\nReactDOM.render(app, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}